# Generated from MyGrammar.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,
        6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,24,4,24,139,8,24,11,24,12,24,140,1,25,1,25,5,25,145,8,25,
        10,25,12,25,148,9,25,1,26,1,26,1,26,1,26,3,26,154,8,26,1,26,1,26,
        1,27,4,27,159,8,27,11,27,12,27,160,1,28,5,28,164,8,28,10,28,12,28,
        167,9,28,1,28,1,28,4,28,171,8,28,11,28,12,28,172,1,28,4,28,176,8,
        28,11,28,12,28,177,1,28,1,28,5,28,182,8,28,10,28,12,28,185,9,28,
        3,28,187,8,28,1,29,1,29,1,29,1,29,5,29,193,8,29,10,29,12,29,196,
        9,29,1,29,3,29,199,8,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,207,8,
        30,10,30,12,30,210,9,30,1,30,1,30,1,30,1,31,4,31,216,8,31,11,31,
        12,31,217,1,31,1,31,2,194,208,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,1,0,4,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,3,0,9,10,13,13,32,32,234,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,
        1,0,0,0,3,67,1,0,0,0,5,70,1,0,0,0,7,73,1,0,0,0,9,76,1,0,0,0,11,79,
        1,0,0,0,13,82,1,0,0,0,15,85,1,0,0,0,17,87,1,0,0,0,19,89,1,0,0,0,
        21,91,1,0,0,0,23,93,1,0,0,0,25,95,1,0,0,0,27,97,1,0,0,0,29,99,1,
        0,0,0,31,101,1,0,0,0,33,103,1,0,0,0,35,105,1,0,0,0,37,111,1,0,0,
        0,39,115,1,0,0,0,41,121,1,0,0,0,43,126,1,0,0,0,45,128,1,0,0,0,47,
        135,1,0,0,0,49,138,1,0,0,0,51,142,1,0,0,0,53,149,1,0,0,0,55,158,
        1,0,0,0,57,186,1,0,0,0,59,188,1,0,0,0,61,202,1,0,0,0,63,215,1,0,
        0,0,65,66,5,59,0,0,66,2,1,0,0,0,67,68,5,38,0,0,68,69,5,38,0,0,69,
        4,1,0,0,0,70,71,5,124,0,0,71,72,5,124,0,0,72,6,1,0,0,0,73,74,5,61,
        0,0,74,75,5,61,0,0,75,8,1,0,0,0,76,77,5,60,0,0,77,78,5,61,0,0,78,
        10,1,0,0,0,79,80,5,62,0,0,80,81,5,61,0,0,81,12,1,0,0,0,82,83,5,33,
        0,0,83,84,5,61,0,0,84,14,1,0,0,0,85,86,5,60,0,0,86,16,1,0,0,0,87,
        88,5,62,0,0,88,18,1,0,0,0,89,90,5,43,0,0,90,20,1,0,0,0,91,92,5,45,
        0,0,92,22,1,0,0,0,93,94,5,47,0,0,94,24,1,0,0,0,95,96,5,37,0,0,96,
        26,1,0,0,0,97,98,5,33,0,0,98,28,1,0,0,0,99,100,5,40,0,0,100,30,1,
        0,0,0,101,102,5,41,0,0,102,32,1,0,0,0,103,104,5,61,0,0,104,34,1,
        0,0,0,105,106,5,99,0,0,106,107,5,111,0,0,107,108,5,110,0,0,108,109,
        5,115,0,0,109,110,5,116,0,0,110,36,1,0,0,0,111,112,5,105,0,0,112,
        113,5,110,0,0,113,114,5,116,0,0,114,38,1,0,0,0,115,116,5,102,0,0,
        116,117,5,108,0,0,117,118,5,111,0,0,118,119,5,97,0,0,119,120,5,116,
        0,0,120,40,1,0,0,0,121,122,5,99,0,0,122,123,5,104,0,0,123,124,5,
        97,0,0,124,125,5,114,0,0,125,42,1,0,0,0,126,127,5,38,0,0,127,44,
        1,0,0,0,128,129,5,112,0,0,129,130,5,114,0,0,130,131,5,105,0,0,131,
        132,5,110,0,0,132,133,5,116,0,0,133,134,5,102,0,0,134,46,1,0,0,0,
        135,136,5,42,0,0,136,48,1,0,0,0,137,139,5,42,0,0,138,137,1,0,0,0,
        139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,50,1,0,0,0,142,
        146,7,0,0,0,143,145,7,1,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,
        144,1,0,0,0,146,147,1,0,0,0,147,52,1,0,0,0,148,146,1,0,0,0,149,153,
        5,39,0,0,150,154,7,0,0,0,151,154,3,55,27,0,152,154,9,0,0,0,153,150,
        1,0,0,0,153,151,1,0,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,156,
        5,39,0,0,156,54,1,0,0,0,157,159,7,2,0,0,158,157,1,0,0,0,159,160,
        1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,56,1,0,0,0,162,164,7,
        2,0,0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,
        0,0,0,166,168,1,0,0,0,167,165,1,0,0,0,168,170,5,46,0,0,169,171,7,
        2,0,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,173,1,
        0,0,0,173,187,1,0,0,0,174,176,7,2,0,0,175,174,1,0,0,0,176,177,1,
        0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,183,5,
        46,0,0,180,182,7,2,0,0,181,180,1,0,0,0,182,185,1,0,0,0,183,181,1,
        0,0,0,183,184,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,186,165,1,
        0,0,0,186,175,1,0,0,0,187,58,1,0,0,0,188,189,5,47,0,0,189,190,5,
        47,0,0,190,194,1,0,0,0,191,193,9,0,0,0,192,191,1,0,0,0,193,196,1,
        0,0,0,194,195,1,0,0,0,194,192,1,0,0,0,195,198,1,0,0,0,196,194,1,
        0,0,0,197,199,5,13,0,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,1,
        0,0,0,200,201,5,10,0,0,201,60,1,0,0,0,202,203,5,47,0,0,203,204,5,
        42,0,0,204,208,1,0,0,0,205,207,9,0,0,0,206,205,1,0,0,0,207,210,1,
        0,0,0,208,209,1,0,0,0,208,206,1,0,0,0,209,211,1,0,0,0,210,208,1,
        0,0,0,211,212,5,42,0,0,212,213,5,47,0,0,213,62,1,0,0,0,214,216,7,
        3,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,217,218,1,
        0,0,0,218,219,1,0,0,0,219,220,6,31,0,0,220,64,1,0,0,0,14,0,140,146,
        153,160,165,172,177,183,186,194,198,208,217,1,6,0,0
    ]

class MyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    POINTER = 24
    POINTERS = 25
    ID = 26
    CHAR = 27
    INT = 28
    FLOAT = 29
    COMMENT = 30
    BLOCK_COMMENT = 31
    WS = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'&&'", "'||'", "'=='", "'<='", "'>='", "'!='", "'<'", 
            "'>'", "'+'", "'-'", "'/'", "'%'", "'!'", "'('", "')'", "'='", 
            "'const'", "'int'", "'float'", "'char'", "'&'", "'printf'", 
            "'*'" ]

    symbolicNames = [ "<INVALID>",
            "POINTER", "POINTERS", "ID", "CHAR", "INT", "FLOAT", "COMMENT", 
            "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "POINTER", "POINTERS", "ID", 
                  "CHAR", "INT", "FLOAT", "COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "MyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


